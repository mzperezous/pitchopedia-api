// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: query.sql

package retrosheet

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getBallparkById = `-- name: GetBallparkById :one
SELECT id, name, nickname, city, state, start_date, end_date, league_id FROM rs_ballpark
WHERE id = $1
`

func (q *Queries) GetBallparkById(ctx context.Context, id string) (RsBallpark, error) {
	row := q.db.QueryRowContext(ctx, getBallparkById, id)
	var i RsBallpark
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Nickname,
		&i.City,
		&i.State,
		&i.StartDate,
		&i.EndDate,
		&i.LeagueID,
	)
	return i, err
}

const getEventById = `-- name: GetEventById :one
SELECT id, game_id, inn_ct, outs_ct, balls_ct, strikes_ct, away_score_ct, home_score_ct, event_tx, leadoff_fl, ph_fl, bat_fld_cd, bat_lineup_spot, bat_event_fl, h_cd, sh_fl, sf_fl, event_outs_ct, dp_fl, tp_fl, rbi_ct, wp_fl, pb_fl, fld_cd, battedball_cd, bunt_fl, foul_fl, battedball_loc_tx, err_ct, err_fld_cds, err_cds, bat_dest_loc, run1_dest_loc, run2_dest_loc, run3_dest_loc, bat_play_tx, run1_play_tx, run2_play_tx, run3_play_tx, run1_sb_fl, run2_sb_fl, run3_sb_fl, run1_cs_fl, run2_cs_fl, run3_cs_fl, run1_pk_fl, run2_pk_fl, run3_pk_fl, game_new_fl, game_end_fl, pr_run1_fl, pr_run2_fl, pr_run3_fl, removed_for_ph_bat_fld_cd, po_fld_cds, ass_fld_cds, away_team_id, base1_run_id, base2_run_id, base3_run_id, bat_team_id, bat_id, home_team_id, pit_id, pos2_fld_id, pos3_fld_id, pos4_fld_id, pos5_fld_id, pos6_fld_id, pos7_fld_id, pos8_fld_id, pos9_fld_id, removed_for_ph_bat_id, removed_for_pr_run1_id, removed_for_pr_run2_id, removed_for_pr_run3_id, run1_resp_pit_id, run2_resp_pit_id, run3_resp_pit_id, year, day, month FROM rs_game_event
WHERE id = $1
`

func (q *Queries) GetEventById(ctx context.Context, id string) (RsGameEvent, error) {
	row := q.db.QueryRowContext(ctx, getEventById, id)
	var i RsGameEvent
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.InnCt,
		&i.OutsCt,
		&i.BallsCt,
		&i.StrikesCt,
		&i.AwayScoreCt,
		&i.HomeScoreCt,
		&i.EventTx,
		&i.LeadoffFl,
		&i.PhFl,
		&i.BatFldCd,
		&i.BatLineupSpot,
		&i.BatEventFl,
		&i.HCd,
		&i.ShFl,
		&i.SfFl,
		&i.EventOutsCt,
		&i.DpFl,
		&i.TpFl,
		&i.RbiCt,
		&i.WpFl,
		&i.PbFl,
		&i.FldCd,
		&i.BattedballCd,
		&i.BuntFl,
		&i.FoulFl,
		&i.BattedballLocTx,
		&i.ErrCt,
		pq.Array(&i.ErrFldCds),
		pq.Array(&i.ErrCds),
		&i.BatDestLoc,
		&i.Run1DestLoc,
		&i.Run2DestLoc,
		&i.Run3DestLoc,
		&i.BatPlayTx,
		&i.Run1PlayTx,
		&i.Run2PlayTx,
		&i.Run3PlayTx,
		&i.Run1SbFl,
		&i.Run2SbFl,
		&i.Run3SbFl,
		&i.Run1CsFl,
		&i.Run2CsFl,
		&i.Run3CsFl,
		&i.Run1PkFl,
		&i.Run2PkFl,
		&i.Run3PkFl,
		&i.GameNewFl,
		&i.GameEndFl,
		&i.PrRun1Fl,
		&i.PrRun2Fl,
		&i.PrRun3Fl,
		&i.RemovedForPhBatFldCd,
		pq.Array(&i.PoFldCds),
		pq.Array(&i.AssFldCds),
		&i.AwayTeamID,
		&i.Base1RunID,
		&i.Base2RunID,
		&i.Base3RunID,
		&i.BatTeamID,
		&i.BatID,
		&i.HomeTeamID,
		&i.PitID,
		&i.Pos2FldID,
		&i.Pos3FldID,
		&i.Pos4FldID,
		&i.Pos5FldID,
		&i.Pos6FldID,
		&i.Pos7FldID,
		&i.Pos8FldID,
		&i.Pos9FldID,
		&i.RemovedForPhBatID,
		&i.RemovedForPrRun1ID,
		&i.RemovedForPrRun2ID,
		&i.RemovedForPrRun3ID,
		&i.Run1RespPitID,
		&i.Run2RespPitID,
		&i.Run3RespPitID,
		&i.Year,
		&i.Day,
		&i.Month,
	)
	return i, err
}

const getPlayerById = `-- name: GetPlayerById :one
SELECT id, last_name, first_name, nickname, birthdate, debut_date, last_game_date FROM rs_player
WHERE id = $1
`

func (q *Queries) GetPlayerById(ctx context.Context, id string) (RsPlayer, error) {
	row := q.db.QueryRowContext(ctx, getPlayerById, id)
	var i RsPlayer
	err := row.Scan(
		&i.ID,
		&i.LastName,
		&i.FirstName,
		&i.Nickname,
		&i.Birthdate,
		&i.DebutDate,
		&i.LastGameDate,
	)
	return i, err
}

const getRosterById = `-- name: GetRosterById :one
SELECT id, year, team_id, player_id, bat_hand, position, throw_hand FROM rs_roster
WHERE id = $1
`

func (q *Queries) GetRosterById(ctx context.Context, id uuid.UUID) (RsRoster, error) {
	row := q.db.QueryRowContext(ctx, getRosterById, id)
	var i RsRoster
	err := row.Scan(
		&i.ID,
		&i.Year,
		&i.TeamID,
		&i.PlayerID,
		&i.BatHand,
		&i.Position,
		&i.ThrowHand,
	)
	return i, err
}

const getTeamById = `-- name: GetTeamById :one
SELECT id, league_id, city, nickname, end_year, start_year FROM rs_team
WHERE id = $1
`

func (q *Queries) GetTeamById(ctx context.Context, id string) (RsTeam, error) {
	row := q.db.QueryRowContext(ctx, getTeamById, id)
	var i RsTeam
	err := row.Scan(
		&i.ID,
		&i.LeagueID,
		&i.City,
		&i.Nickname,
		&i.EndYear,
		&i.StartYear,
	)
	return i, err
}
