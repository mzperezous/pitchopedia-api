// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: query.sql

package lahman

import (
	"context"
	"database/sql"
)

const getBattingSeasonById = `-- name: GetBattingSeasonById :one
SELECT id, year, league, g_cnt, ab_cnt, r_cnt, h_cnt, double_cnt, triple_cnt, hr_cnt, rbi_cnt, sb_cnt, cs_cnt, bb_cnt, so_cnt, ibb_cnt, sf_cnt, sh_cnt, gidp_cnt, player, team FROM l_batting
WHERE id = $1
`

func (q *Queries) GetBattingSeasonById(ctx context.Context, id int32) (LBatting, error) {
	row := q.db.QueryRowContext(ctx, getBattingSeasonById, id)
	var i LBatting
	err := row.Scan(
		&i.ID,
		&i.Year,
		&i.League,
		&i.GCnt,
		&i.AbCnt,
		&i.RCnt,
		&i.HCnt,
		&i.DoubleCnt,
		&i.TripleCnt,
		&i.HrCnt,
		&i.RbiCnt,
		&i.SbCnt,
		&i.CsCnt,
		&i.BbCnt,
		&i.SoCnt,
		&i.IbbCnt,
		&i.SfCnt,
		&i.ShCnt,
		&i.GidpCnt,
		&i.Player,
		&i.Team,
	)
	return i, err
}

const getFranchiseByName = `-- name: GetFranchiseByName :one
SELECT id, name, active FROM l_franchise
WHERE name = $1
`

func (q *Queries) GetFranchiseByName(ctx context.Context, name sql.NullString) (LFranchise, error) {
	row := q.db.QueryRowContext(ctx, getFranchiseByName, name)
	var i LFranchise
	err := row.Scan(&i.ID, &i.Name, &i.Active)
	return i, err
}

const getPitchingSeasonById = `-- name: GetPitchingSeasonById :one
SELECT id, year, league, w_cnt, l_cnt, g_cnt, gs_cnt, cg_cnt, sho_cnt, sv_cnt, ip_cnt, h_cnt, er_cnt, hr_cnt, bb_cnt, so_cnt, ba_opp, era, ibb_cnt, wp_cnt, hbp_cnt, bk_cnt, bfp_cnt, gf_cnt, r_cnt, sh_cnt, sf_cnt, gidp_cnt, player, team FROM l_pitching
WHERE id = $1
`

func (q *Queries) GetPitchingSeasonById(ctx context.Context, id int32) (LPitching, error) {
	row := q.db.QueryRowContext(ctx, getPitchingSeasonById, id)
	var i LPitching
	err := row.Scan(
		&i.ID,
		&i.Year,
		&i.League,
		&i.WCnt,
		&i.LCnt,
		&i.GCnt,
		&i.GsCnt,
		&i.CgCnt,
		&i.ShoCnt,
		&i.SvCnt,
		&i.IpCnt,
		&i.HCnt,
		&i.ErCnt,
		&i.HrCnt,
		&i.BbCnt,
		&i.SoCnt,
		&i.BaOpp,
		&i.Era,
		&i.IbbCnt,
		&i.WpCnt,
		&i.HbpCnt,
		&i.BkCnt,
		&i.BfpCnt,
		&i.GfCnt,
		&i.RCnt,
		&i.ShCnt,
		&i.SfCnt,
		&i.GidpCnt,
		&i.Player,
		&i.Team,
	)
	return i, err
}

const getPlayerById = `-- name: GetPlayerById :one
SELECT id, first_name, last_name, given_name, birth_year, birth_month, birth_day, birth_country, birth_state, birth_city, death_year, death_month, death_day, death_country, death_state, death_city, height, weight, bat_hand, throw_hand, debut_date, final_game_date, bbref, retrosheet from l_player
WHERE id = $1
`

func (q *Queries) GetPlayerById(ctx context.Context, id string) (LPlayer, error) {
	row := q.db.QueryRowContext(ctx, getPlayerById, id)
	var i LPlayer
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.GivenName,
		&i.BirthYear,
		&i.BirthMonth,
		&i.BirthDay,
		&i.BirthCountry,
		&i.BirthState,
		&i.BirthCity,
		&i.DeathYear,
		&i.DeathMonth,
		&i.DeathDay,
		&i.DeathCountry,
		&i.DeathState,
		&i.DeathCity,
		&i.Height,
		&i.Weight,
		&i.BatHand,
		&i.ThrowHand,
		&i.DebutDate,
		&i.FinalGameDate,
		&i.Bbref,
		&i.Retrosheet,
	)
	return i, err
}

const getTeamById = `-- name: GetTeamById :one
SELECT id, year, team, league, division, rank, game_cnt, home_game_cnt, w_cnt, l_cnt, ds_win, wc_win, lg_win, ws_win, r_cnt, ab_cnt, h_cnt, double_cnt, triple_cnt, hr_cnt, bb_cnt, so_cnt, sb_cnt, cs_cnt, hbp_cnt, sf_cnt, ra_cnt, er_cnt, era, cg_cnt, sho_cnt, sv_cnt, ip_cnt, ha_cnt, hra_cnt, bba_cnt, soa_cnt, e_cnt, franchise from l_team
WHERE id = $1
`

func (q *Queries) GetTeamById(ctx context.Context, id int32) (LTeam, error) {
	row := q.db.QueryRowContext(ctx, getTeamById, id)
	var i LTeam
	err := row.Scan(
		&i.ID,
		&i.Year,
		&i.Team,
		&i.League,
		&i.Division,
		&i.Rank,
		&i.GameCnt,
		&i.HomeGameCnt,
		&i.WCnt,
		&i.LCnt,
		&i.DsWin,
		&i.WcWin,
		&i.LgWin,
		&i.WsWin,
		&i.RCnt,
		&i.AbCnt,
		&i.HCnt,
		&i.DoubleCnt,
		&i.TripleCnt,
		&i.HrCnt,
		&i.BbCnt,
		&i.SoCnt,
		&i.SbCnt,
		&i.CsCnt,
		&i.HbpCnt,
		&i.SfCnt,
		&i.RaCnt,
		&i.ErCnt,
		&i.Era,
		&i.CgCnt,
		&i.ShoCnt,
		&i.SvCnt,
		&i.IpCnt,
		&i.HaCnt,
		&i.HraCnt,
		&i.BbaCnt,
		&i.SoaCnt,
		&i.ECnt,
		&i.Franchise,
	)
	return i, err
}
